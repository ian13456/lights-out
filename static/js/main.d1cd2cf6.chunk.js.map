{"version":3,"sources":["containers/logo.svg","containers/App.js","utils/serviceWorker.js","index.js"],"names":["module","exports","rules","colors","getCellColor","number","App","useState","Math","floor","random","state","setState","restart","setRestart","handleClick","pairs","cloneState","JSON","parse","stringify","forEach","i","j","handleRules","cell","augmented","map","row","concat","matrix","Matrix","length","PrimeField","set","answer","reducedRowEchelonForm","useEffect","mapped","n","push","Array","fill","counter","interval","setInterval","clearInterval","className","src","logo","alt","id","onClick","style","backgroundColor","a","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,uMCMrCC,EAAQ,CACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIpBC,EAAS,CAAC,UAAW,UAAW,WAEhCC,EAAe,SAACC,GAAD,OAAYF,EAAOE,EAHxB,IA2PDC,MAlPf,WAqHC,IArHe,IAAD,EACYC,mBAAS,CAUlCC,KAAKC,MApBS,EAoBHD,KAAKE,UAChBF,KAAKC,MArBS,EAqBHD,KAAKE,UAChBF,KAAKC,MAtBS,EAsBHD,KAAKE,UAChBF,KAAKC,MAvBS,EAuBHD,KAAKE,UAChBF,KAAKC,MAxBS,EAwBHD,KAAKE,UAChBF,KAAKC,MAzBS,EAyBHD,KAAKE,UAChBF,KAAKC,MA1BS,EA0BHD,KAAKE,UAChBF,KAAKC,MA3BS,EA2BHD,KAAKE,UAChBF,KAAKC,MA5BS,EA4BHD,KAAKE,YAnBH,mBACPC,EADO,KACAC,EADA,OAqBgBL,oBAAS,GArBzB,mBAqBPM,EArBO,KAqBEC,EArBF,KAuBRC,EAAc,SAACC,GACpBJ,GAAS,SAACD,GACT,IAAMM,EAAaC,KAAKC,MAAMD,KAAKE,UAAUT,IAK7C,OAJAK,EAAMK,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACzBN,EApCY,EAoCDK,EAAcC,KAAON,EApCpB,EAoC+BK,EAAcC,GAAK,KAGxDN,MAIHO,EAAc,SAACC,GACpB,OAAQA,GACP,IAAK,KACJV,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAEL,MACD,IAAK,KACJA,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAEL,MACD,IAAK,KACJA,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAEL,MACD,IAAK,KACJA,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAEL,MACD,IAAK,KACJA,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAEL,MACD,IAAK,KACJA,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAEL,MACD,IAAK,KACJA,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAEL,MACD,IAAK,KACJA,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAEL,MACD,IAAK,KACJA,EAAY,CACX,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,OAQFW,EAAYxB,EAAMyB,KAAI,SAACC,EAAKN,GAAN,OAAYM,EAAIC,OAAOlB,EAAMW,OACnDQ,EAAS,IAAIC,IAClBL,EAAUM,OACVN,EAAU,GAAGM,OACb,IAAIC,IA3HU,IA8HNX,EAAI,EAAGA,EAAII,EAAUM,OAAQV,IACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIG,EAAUJ,GAAGU,OAAQT,IACxCO,EAAOI,IAAIZ,EAAGC,EAAGG,EAAUJ,GAAGC,IAGhC,IAAMY,EAASL,EACbM,wBACAT,KAAI,SAACC,GAAD,OAA+B,EAAtBA,EAAIA,EAAII,OAAS,MAqBhC,OAnBAK,qBAAU,WACT,IAAMC,EAAS,GACfH,EAAOd,SAAQ,SAACkB,EAAGjB,GAAJ,OAAUiB,GAAKD,EAAOE,KAAP,MAAAF,EAAM,YAAS,IAAIG,MAAMF,GAAGG,KAAKpB,QAE/D,IAAIqB,EAAU,EACRC,EAAWC,aAAY,WAC5BrB,EAAY,GAAD,OACPhB,KAAKC,MAAM6B,EAAOK,GAAW,IADtB,OAC2BL,EAAOK,GAAW,MAExDA,IAEgBL,EAAON,SACtBlB,GAAW,GACXgC,cAAcF,MAEb,OAED,CAAC/B,IAGH,yBAAKkC,UAAU,OACd,4BAAQA,UAAU,cACjB,yBAAKA,UAAU,sBACd,yBAAKC,IAAKC,IAAMC,IAAI,YAAYH,UAAU,cAE3C,2CAED,0BAAMA,UAAU,YACf,yBAAKA,UAAU,QACd,yBAAKA,UAAU,OACd,yBACCA,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,OAE9C,yBACCoC,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,OAE9C,yBACCoC,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,QAG/C,yBAAKoC,UAAU,OACd,yBACCA,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,OAE9C,yBACCoC,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,OAE9C,yBACCoC,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,QAG/C,yBAAKoC,UAAU,OACd,yBACCA,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,OAE9C,yBACCoC,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,OAE9C,yBACCoC,UAAU,OACVI,GAAG,MACHC,QAAS,kBAAMvC,GAAWW,EAAY,OACtC6B,MAAO,CAAEC,gBAAiBlD,EAAaO,EAAM,UAKjD,4BAAQoC,UAAU,cACjB,0BAAMA,UAAU,YAAYK,QAAS,kBAAMtC,GAAW,KAAtD,cAGCD,GACA,oCACC,0BAAMkC,UAAU,UAAhB,UACA,0BACCA,UAAU,YACVK,QAAS,WACRxC,GAAS,iBAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,QAH1C,YAUF,6BAjBD,UAmBC,0BAAMmC,UAAU,UAAUZ,EAAOR,KAAI,SAAC4B,GAAD,OAAOA,EAAI,SC3PhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d1cd2cf6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c4be7ead.svg\";","import './App.scss'\nimport logo from './logo.svg'\n\nimport React, { useEffect, useState } from 'react'\nimport { Matrix, PrimeField } from 'gauss-jordan'\n\nconst rules = [\n\t[1, 1, 0, 1, 0, 0, 0, 0, 0],\n\t[1, 1, 1, 0, 1, 0, 0, 0, 0],\n\t[0, 1, 1, 0, 0, 1, 0, 0, 0],\n\t[1, 0, 0, 1, 1, 0, 1, 0, 0],\n\t[1, 0, 1, 0, 1, 0, 1, 0, 1],\n\t[0, 0, 1, 0, 1, 1, 0, 0, 1],\n\t[0, 0, 0, 1, 0, 0, 1, 1, 0],\n\t[0, 0, 0, 0, 1, 0, 1, 1, 1],\n\t[0, 0, 0, 0, 0, 1, 0, 1, 1]\n]\n\nconst modulus = 3\nconst colors = ['#393b44', '#d6e0f0', '#8d93ab']\n\nconst getCellColor = (number) => colors[number % modulus]\n\n// black = 0\n// white = 1\n// gray = 2\n\nfunction App() {\n\tconst [state, setState] = useState([\n\t\t// 0,\n\t\t// 0,\n\t\t// 0,\n\t\t// 0,\n\t\t// 0,\n\t\t// 0,\n\t\t// 0,\n\t\t// 0,\n\t\t// 0\n\t\tMath.floor(Math.random() * modulus),\n\t\tMath.floor(Math.random() * modulus),\n\t\tMath.floor(Math.random() * modulus),\n\t\tMath.floor(Math.random() * modulus),\n\t\tMath.floor(Math.random() * modulus),\n\t\tMath.floor(Math.random() * modulus),\n\t\tMath.floor(Math.random() * modulus),\n\t\tMath.floor(Math.random() * modulus),\n\t\tMath.floor(Math.random() * modulus)\n\t])\n\tconst [restart, setRestart] = useState(false)\n\n\tconst handleClick = (pairs) => {\n\t\tsetState((state) => {\n\t\t\tconst cloneState = JSON.parse(JSON.stringify(state))\n\t\t\tpairs.forEach(([i, j]) => {\n\t\t\t\tcloneState[i * modulus + j] = ++cloneState[i * modulus + j] % 3\n\t\t\t})\n\n\t\t\treturn cloneState\n\t\t})\n\t}\n\n\tconst handleRules = (cell) => {\n\t\tswitch (cell) {\n\t\t\tcase '00':\n\t\t\t\thandleClick([\n\t\t\t\t\t[0, 0],\n\t\t\t\t\t[0, 1],\n\t\t\t\t\t[1, 0],\n\t\t\t\t\t[1, 1]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tcase '01':\n\t\t\t\thandleClick([\n\t\t\t\t\t[0, 0],\n\t\t\t\t\t[0, 1],\n\t\t\t\t\t[0, 2]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tcase '02':\n\t\t\t\thandleClick([\n\t\t\t\t\t[0, 1],\n\t\t\t\t\t[0, 2],\n\t\t\t\t\t[1, 1],\n\t\t\t\t\t[1, 2]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tcase '10':\n\t\t\t\thandleClick([\n\t\t\t\t\t[0, 0],\n\t\t\t\t\t[1, 0],\n\t\t\t\t\t[2, 0]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tcase '11':\n\t\t\t\thandleClick([\n\t\t\t\t\t[0, 1],\n\t\t\t\t\t[1, 0],\n\t\t\t\t\t[1, 1],\n\t\t\t\t\t[1, 2],\n\t\t\t\t\t[2, 1]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tcase '12':\n\t\t\t\thandleClick([\n\t\t\t\t\t[0, 2],\n\t\t\t\t\t[1, 2],\n\t\t\t\t\t[2, 2]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tcase '20':\n\t\t\t\thandleClick([\n\t\t\t\t\t[1, 0],\n\t\t\t\t\t[1, 1],\n\t\t\t\t\t[2, 0],\n\t\t\t\t\t[2, 1]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tcase '21':\n\t\t\t\thandleClick([\n\t\t\t\t\t[2, 0],\n\t\t\t\t\t[2, 1],\n\t\t\t\t\t[2, 2]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tcase '22':\n\t\t\t\thandleClick([\n\t\t\t\t\t[1, 1],\n\t\t\t\t\t[1, 2],\n\t\t\t\t\t[2, 1],\n\t\t\t\t\t[2, 2]\n\t\t\t\t])\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\tconst augmented = rules.map((row, i) => row.concat(state[i]))\n\tconst matrix = new Matrix(\n\t\taugmented.length,\n\t\taugmented[0].length,\n\t\tnew PrimeField(modulus)\n\t)\n\n\tfor (let i = 0; i < augmented.length; i++) {\n\t\tfor (let j = 0; j < augmented[i].length; j++)\n\t\t\tmatrix.set(i, j, augmented[i][j])\n\t}\n\n\tconst answer = matrix\n\t\t.reducedRowEchelonForm()\n\t\t.map((row) => row[row.length - 1] * 2)\n\n\tuseEffect(() => {\n\t\tconst mapped = []\n\t\tanswer.forEach((n, i) => n && mapped.push(...new Array(n).fill(i)))\n\n\t\tlet counter = 0\n\t\tconst interval = setInterval(() => {\n\t\t\thandleRules(\n\t\t\t\t`${Math.floor(mapped[counter] / 3)}${mapped[counter] % 3}`\n\t\t\t)\n\t\t\tcounter++\n\n\t\t\tif (counter === mapped.length) {\n\t\t\t\tsetRestart(true)\n\t\t\t\tclearInterval(interval)\n\t\t\t}\n\t\t}, 200)\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [restart])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<div className=\"App-logo-container\">\n\t\t\t\t\t<img src={logo} alt=\"lightbulb\" className=\"App-logo\" />\n\t\t\t\t</div>\n\t\t\t\t<h1>Lights Out</h1>\n\t\t\t</header>\n\t\t\t<main className=\"App-main\">\n\t\t\t\t<div className=\"game\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"0-0\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('00')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[0]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"0-1\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('01')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[1]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"0-2\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('02')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[2]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"1-0\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('10')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[3]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"1-1\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('11')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[4]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"1-2\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('12')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[5]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"2-0\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('20')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[6]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"2-1\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('21')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[7]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"cell\"\n\t\t\t\t\t\t\tid=\"2-2\"\n\t\t\t\t\t\t\tonClick={() => restart && handleRules('22')}\n\t\t\t\t\t\t\tstyle={{ backgroundColor: getCellColor(state[8]) }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t\t<footer className=\"App-footer\">\n\t\t\t\t<span className=\"run-again\" onClick={() => setRestart(false)}>\n\t\t\t\t\trun again?\n\t\t\t\t</span>\n\t\t\t\t{restart && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<span className=\"spacer\">•</span>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName=\"run-again\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetState(() => [0, 0, 1, 2, 2, 1, 0, 1, 2])\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tdefault\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t<br />\n\t\t\t\tAnswer:\n\t\t\t\t<span className=\"answer\">{answer.map((a) => a % 3)}</span>\n\t\t\t</footer>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './utils/serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}