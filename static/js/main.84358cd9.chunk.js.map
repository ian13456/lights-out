{"version":3,"sources":["containers/logo.svg","containers/App.js","utils/serviceWorker.js","index.js"],"names":["module","exports","rules","colors","getCellColor","number","App","useState","state","setState","useEffect","augmented","map","row","i","concat","matrix","Matrix","length","PrimeField","j","set","console","log","reducedRowEchelonForm","handleClick","pairs","cloneState","JSON","parse","stringify","forEach","className","src","logo","alt","id","onClick","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84358cd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c4be7ead.svg\";","import './App.scss'\nimport logo from './logo.svg'\n\nimport React, { useEffect, useState } from 'react'\nimport { Matrix, PrimeField } from 'gauss-jordan'\n\nconst rules = [\n  [1, 1, 0, 1, 0, 0, 0, 0, 0],\n  [1, 1, 1, 0, 1, 0, 0, 0, 0],\n  [0, 1, 1, 0, 0, 1, 0, 0, 0],\n  [1, 0, 0, 1, 1, 0, 1, 0, 0],\n  [1, 0, 1, 0, 1, 0, 1, 0, 1],\n  [0, 0, 1, 0, 1, 1, 0, 0, 1],\n  [0, 0, 0, 1, 0, 0, 1, 1, 0],\n  [0, 0, 0, 0, 1, 0, 1, 1, 1],\n  [0, 0, 0, 0, 0, 1, 0, 1, 1]\n]\n\nconst modulus = 3\nconst colors = ['#d6e0f0', '#8d93ab', '#393b44']\n\nconst getCellColor = (number) => colors[number % modulus]\n\n// black = 0\n// white = 1\n// gray = 2\n\nfunction App() {\n  const [state, setState] = useState([\n    // 0,\n    // 0,\n    // 0,\n    // 0,\n    // 0,\n    // 0,\n    // 0,\n    // 0,\n    // 0\n    2,\n    2,\n    0,\n    1,\n    1,\n    0,\n    2,\n    0,\n    1\n    // Math.floor(Math.random() * modulus),\n    // Math.floor(Math.random() * modulus),\n    // Math.floor(Math.random() * modulus),\n    // Math.floor(Math.random() * modulus),\n    // Math.floor(Math.random() * modulus),\n    // Math.floor(Math.random() * modulus),\n    // Math.floor(Math.random() * modulus),\n    // Math.floor(Math.random() * modulus),\n    // Math.floor(Math.random() * modulus)\n  ])\n\n  useEffect(() => {\n    const augmented = rules.map((row, i) => row.concat(state[i]))\n    const matrix = new Matrix(\n      augmented.length,\n      augmented[0].length,\n      new PrimeField(modulus)\n    )\n\n    for (let i = 0; i < augmented.length; i++) {\n      for (let j = 0; j < augmented[i].length; j++)\n        matrix.set(i, j, augmented[i][j])\n    }\n\n    console.log(matrix.reducedRowEchelonForm())\n  }, [])\n\n  const handleClick = (pairs) => {\n    const cloneState = JSON.parse(JSON.stringify(state))\n    pairs.forEach(([i, j]) => {\n      cloneState[i * modulus + j] = ++cloneState[i * modulus + j]\n    })\n\n    setState(cloneState)\n  }\n\n  const click00 = () => {\n    handleClick([\n      [0, 0],\n      [0, 1],\n      [1, 0],\n      [1, 1]\n    ])\n  }\n\n  const click01 = () => {\n    handleClick([\n      [0, 0],\n      [0, 1],\n      [0, 2]\n    ])\n  }\n\n  const click02 = () => {\n    handleClick([\n      [0, 1],\n      [0, 2],\n      [1, 1],\n      [1, 2]\n    ])\n  }\n\n  const click10 = () => {\n    handleClick([\n      [0, 0],\n      [1, 0],\n      [2, 0]\n    ])\n  }\n\n  const click11 = () => {\n    handleClick([\n      [0, 1],\n      [1, 0],\n      [1, 1],\n      [1, 2],\n      [2, 1]\n    ])\n  }\n\n  const click12 = () => {\n    handleClick([\n      [0, 2],\n      [1, 2],\n      [2, 2]\n    ])\n  }\n\n  const click20 = () => {\n    handleClick([\n      [1, 0],\n      [1, 1],\n      [2, 0],\n      [2, 1]\n    ])\n  }\n\n  const click21 = () => {\n    handleClick([\n      [2, 0],\n      [2, 1],\n      [2, 2]\n    ])\n  }\n\n  const click22 = () => {\n    handleClick([\n      [1, 1],\n      [1, 2],\n      [2, 1],\n      [2, 2]\n    ])\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-logo-container\">\n          <img src={logo} alt=\"lightbulb\" className=\"App-logo\" />\n        </div>\n        <h1>Lights Out</h1>\n      </header>\n      <main className=\"App-main\">\n        <div className=\"game\">\n          <div className=\"row\">\n            <div\n              className=\"cell\"\n              id=\"0-0\"\n              onClick={click00}\n              style={{ backgroundColor: getCellColor(state[0]) }}\n            ></div>\n            <div\n              className=\"cell\"\n              id=\"0-1\"\n              onClick={click01}\n              style={{ backgroundColor: getCellColor(state[1]) }}\n            ></div>\n            <div\n              className=\"cell\"\n              id=\"0-2\"\n              onClick={click02}\n              style={{ backgroundColor: getCellColor(state[2]) }}\n            ></div>\n          </div>\n          <div className=\"row\">\n            <div\n              className=\"cell\"\n              id=\"1-0\"\n              onClick={click10}\n              style={{ backgroundColor: getCellColor(state[3]) }}\n            ></div>\n            <div\n              className=\"cell\"\n              id=\"1-1\"\n              onClick={click11}\n              style={{ backgroundColor: getCellColor(state[4]) }}\n            ></div>\n            <div\n              className=\"cell\"\n              id=\"1-2\"\n              onClick={click12}\n              style={{ backgroundColor: getCellColor(state[5]) }}\n            ></div>\n          </div>\n          <div className=\"row\">\n            <div\n              className=\"cell\"\n              id=\"2-0\"\n              onClick={click20}\n              style={{ backgroundColor: getCellColor(state[6]) }}\n            ></div>\n            <div\n              className=\"cell\"\n              id=\"2-1\"\n              onClick={click21}\n              style={{ backgroundColor: getCellColor(state[7]) }}\n            ></div>\n            <div\n              className=\"cell\"\n              id=\"2-2\"\n              onClick={click22}\n              style={{ backgroundColor: getCellColor(state[8]) }}\n            ></div>\n          </div>\n        </div>\n      </main>\n      <footer className=\"App-footer\">\n        <button>Play</button>\n        <button>Pause</button>\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './utils/serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}